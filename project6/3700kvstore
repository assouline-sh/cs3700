#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os

BROADCAST = "FFFF"
leader_id = "FFFF"
database = {}
num_puts = 0

class Replica:
	def __init__(self, port, id, others):
		self.port = port
		self.id = id
		self.others = others

		self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		self.socket.bind(('localhost', 0))

		print("Replica %s starting up" % self.id, flush=True)
		hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
		self.send(hello)
		print("Sent hello message: %s" % hello, flush=True)

	def send(self, message):
		self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))


	def parse_message(self, msg):
		print("REACHED PARSE MESSAGE")
		print("SELF ID: " + str(self.id))
		try:
			if (msg['leader'] == BROADCAST):
				if (msg['type'] == 'put'):
					database.update({msg['key']: msg['value']})
					put_ok = { "src": self.id, "dst": msg['src'], "leader": BROADCAST, "type": "ok", "MID": msg['MID'] }
					self.send(put_ok)
					num_puts += 1
					print("DATABASE: " + str(database))
				if (msg['type'] == 'get'):
					get_ok = { "src": self.id, "dst": msg['src'], "leader": BROADCAST, "type": "ok", "MID": msg['MID'], "value": database[msg['key']] }
					self.send(get_ok)
			else:
				response_redirect = { "src": self.id, "dst": msg['src'], "leader": BROADCAST, "type": "redirect", "MID": msg['MID'] }
				self.send(response_redirect)
		except:
			response_fail = { "src": self.id, "dst": msg['src'], "leader": BROADCAST, "type": "fail", "MID": msg['MID'] }
			self.send(response_fail)

	def run(self):
		while True:
			data, addr = self.socket.recvfrom(65535)
			msg = json.loads(data.decode('utf-8'))
			print("RECEIVED MESSAGE: " + str(msg), flush=True)
			self.parse_message(msg)

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='run a key-value store')
	parser.add_argument('port', type=int, help="Port number to communicate")
	parser.add_argument('id', type=str, help="ID of this replica")
	parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
	args = parser.parse_args()
	replica = Replica(args.port, args.id, args.others)
	replica.run()
