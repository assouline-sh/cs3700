#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, zlib

# Class for receiver
class Receiver:
	# Initialize connection and global variables
	def __init__(self):
		self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		self.socket.bind(('0.0.0.0', 0))
		self.port = self.socket.getsockname()[1]
		self.log("Bound to port %d" % self.port)

		self.remote_host = None
		self.remote_port = None
		self.current_sequence = 0
		self.buffer = {}
		self.sequences_ack = []


	# Send message to sender
	def send(self, message):
		self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))


	# Log message to stderr
	def log(self, message):
		sys.stderr.write(message + "\n")
		sys.stderr.flush()


	# Send an ACK to sender for the given message
	def send_ack(self, msg):
		self.log("Received data message %s" % str(msg["seq"]))
		self.send({"type": "ack", "data": msg["data"], "seq": msg["seq"]})


	# Check if the received message is corrupt
	def check_corrupt(self, msg):
		self.log("THIS IS WHAT MSG LOOKS LIKE: " + str(msg))
		if (("type" in list(msg.keys())) and ("data" in list(msg.keys())) and ("checksum" in list(msg.keys()))):
			if (msg["type"] == "msg"):
				self.log("IN CORRUPT, MESSAGE TYPE IS DATA")
				check_checksum = json.dumps({"data": msg["data"]}).encode('utf-8')
				check_checksum = zlib.crc32(check_checksum)
				self.log("*******NEW GENERATED CHECKSUM*********" + str(check_checksum))
				if (msg["checksum"] == check_checksum):
					self.log("IN CORRUPT, CHECKSUMS ARE THE SAME")
					return False
		return True


	# Run the receiver
	def run(self):
		while True:
			socks = select.select([self.socket], [], [])[0]
			for conn in socks:
				data, addr = conn.recvfrom(65535)
				# Grab the remote host/port if we don't alreadt have it
				if self.remote_host is None:
					self.remote_host = addr[0]
					self.remote_port = addr[1]
				corrupt = False
				try:
					msg = json.loads(data.decode('utf-8'))
				except:
					corrupt = True
				if (corrupt or self.check_corrupt(msg)):
					self.log("RECEIVED CORRUPT ACK: " + str(msg["seq"]))
				else:
					self.send_ack(msg)	
				
					# If received packet is not a duplicate (we have not seen the sequence number before)
					if not(msg["seq"] in self.sequences_ack):
						self.sequences_ack.append(msg["seq"])	
						# If this is the next packet in the sequence
						if (msg["seq"] == self.current_sequence):
							self.current_sequence += 1
							print(msg["data"], end='', flush=True)

							# Send messages in buffer that arrived before current packet out of order
							if (not(self.buffer is None) and (self.current_sequence in list(self.buffer.keys()))):
								# Sort the entries in the buffer
								temporary_buffer = sorted(self.buffer)
								self.buffer = {key:self.buffer[key] for key in temporary_buffer}
								buffer_copy = self.buffer.copy()
								for seq, msg in buffer_copy.items():
									if (seq == self.current_sequence):
										self.buffer.pop(seq)
										self.current_sequence += 1
										print(msg["data"], end='', flush=True)
						else:
							self.buffer.update({msg["seq"]: msg})
						continue
							
					else:
						continue

		return

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='receive data')
	args = parser.parse_args()
	sender = Receiver()
	sender.run()
